record `androidx.core.hardware.fingerprint.FingerprintManagerCompat` @kind class @AccessFlag PUBLIC_FINAL {
  `android.content.Context` `androidx.core.hardware.fingerprint.FingerprintManagerCompat.mContext` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`androidx.core.hardware.fingerprint.FingerprintManagerCompat` v0 @kind this, `android.content.Context` v1 @kind object @name `context`) @signature `Landroidx/core/hardware/fingerprint/FingerprintManagerCompat;.<init>:(Landroid/content/Context;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `androidx.core.hardware.fingerprint.FingerprintManagerCompat` `from`(`android.content.Context` v1 @kind object @name `context`) @signature `Landroidx/core/hardware/fingerprint/FingerprintManagerCompat;.from:(Landroid/content/Context;)Landroidx/core/hardware/fingerprint/FingerprintManagerCompat;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `android.hardware.fingerprint.FingerprintManager` `getFingerprintManagerOrNull`(`android.content.Context` v2 @kind object @name `context`) @signature `Landroidx/core/hardware/fingerprint/FingerprintManagerCompat;.getFingerprintManagerOrNull:(Landroid/content/Context;)Landroid/hardware/fingerprint/FingerprintManager;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject` `unwrapCryptoObject`(`android.hardware.fingerprint.FingerprintManager$CryptoObject` v2 @kind object @name `cryptoObject`) @signature `Landroidx/core/hardware/fingerprint/FingerprintManagerCompat;.unwrapCryptoObject:(Landroid/hardware/fingerprint/FingerprintManager$CryptoObject;)Landroidx/core/hardware/fingerprint/FingerprintManagerCompat$CryptoObject;` @AccessFlag STATIC {

  # return;
}
procedure `android.hardware.fingerprint.FingerprintManager$AuthenticationCallback` `wrapCallback`(`androidx.core.hardware.fingerprint.FingerprintManagerCompat$AuthenticationCallback` v1 @kind object @name `callback`) @signature `Landroidx/core/hardware/fingerprint/FingerprintManagerCompat;.wrapCallback:(Landroidx/core/hardware/fingerprint/FingerprintManagerCompat$AuthenticationCallback;)Landroid/hardware/fingerprint/FingerprintManager$AuthenticationCallback;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `android.hardware.fingerprint.FingerprintManager$CryptoObject` `wrapCryptoObject`(`androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject` v2 @kind object @name `cryptoObject`) @signature `Landroidx/core/hardware/fingerprint/FingerprintManagerCompat;.wrapCryptoObject:(Landroidx/core/hardware/fingerprint/FingerprintManagerCompat$CryptoObject;)Landroid/hardware/fingerprint/FingerprintManager$CryptoObject;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `authenticate`(`androidx.core.hardware.fingerprint.FingerprintManagerCompat` v7 @kind this, `androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject` v8 @kind object @name `crypto`, `int` v9 @name `flags`, `androidx.core.os.CancellationSignal` v10 @kind object @name `cancel`, `androidx.core.hardware.fingerprint.FingerprintManagerCompat$AuthenticationCallback` v11 @kind object @name `callback`, `android.os.Handler` v12 @kind object @name `handler`) @signature `Landroidx/core/hardware/fingerprint/FingerprintManagerCompat;.authenticate:(Landroidx/core/hardware/fingerprint/FingerprintManagerCompat$CryptoObject;ILandroidx/core/os/CancellationSignal;Landroidx/core/hardware/fingerprint/FingerprintManagerCompat$AuthenticationCallback;Landroid/os/Handler;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `hasEnrolledFingerprints`(`androidx.core.hardware.fingerprint.FingerprintManagerCompat` v3 @kind this) @signature `Landroidx/core/hardware/fingerprint/FingerprintManagerCompat;.hasEnrolledFingerprints:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isHardwareDetected`(`androidx.core.hardware.fingerprint.FingerprintManagerCompat` v3 @kind this) @signature `Landroidx/core/hardware/fingerprint/FingerprintManagerCompat;.isHardwareDetected:()Z` @AccessFlag PUBLIC {

  # return;
}
