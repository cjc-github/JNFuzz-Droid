record `androidx.core.provider.SelfDestructiveThread$3` @kind class @AccessFlag  extends `java.lang.Runnable` @kind interface {
  `androidx.core.provider.SelfDestructiveThread` `androidx.core.provider.SelfDestructiveThread$3.this$0` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.Callable` `androidx.core.provider.SelfDestructiveThread$3.val$callable` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.locks.Condition` `androidx.core.provider.SelfDestructiveThread$3.val$cond` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicReference` `androidx.core.provider.SelfDestructiveThread$3.val$holder` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.locks.ReentrantLock` `androidx.core.provider.SelfDestructiveThread$3.val$lock` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicBoolean` `androidx.core.provider.SelfDestructiveThread$3.val$running` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`androidx.core.provider.SelfDestructiveThread$3` v0 @kind this, `androidx.core.provider.SelfDestructiveThread` v1 @kind object @name `this$0`, `java.util.concurrent.atomic.AtomicReference` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `java.util.concurrent.locks.ReentrantLock` v4 @kind object, `java.util.concurrent.atomic.AtomicBoolean` v5 @kind object, `java.util.concurrent.locks.Condition` v6 @kind object) @signature `Landroidx/core/provider/SelfDestructiveThread$3;.<init>:(Landroidx/core/provider/SelfDestructiveThread;Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/Callable;Ljava/util/concurrent/locks/ReentrantLock;Ljava/util/concurrent/atomic/AtomicBoolean;Ljava/util/concurrent/locks/Condition;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `run`(`androidx.core.provider.SelfDestructiveThread$3` v2 @kind this) @signature `Landroidx/core/provider/SelfDestructiveThread$3;.run:()V` @AccessFlag PUBLIC {

  # return;
}
